[comment encoding = UTF-8 /]
[module msForms('http://www.eclipse.org/uml2/5.0.0/UML')]

[import org::eclipse::acceleo::module::publicdocs::common::util/]
[import org::eclipse::acceleo::module::publicdocs::common::schema/]
[import org::eclipse::acceleo::module::publicdocs::common::complextype /]
[import org::eclipse::acceleo::module::publicdocs::common::element /]


[template public generateMSForms(model : Model){
version: String = getVersion('xsd');
}] 
[for (packageableElement: PackageableElement | model.packagedElement->select(oclIsTypeOf(Package)and hasStereotype('isa::xsdSchema')))]
[if not (packageableElement.name = 'forms' or packageableElement.name = 'pdc')]
[generateXSDFile(model, 'path_ms', packageableElement.oclAsType(Package), '-', version)/][/if]
[/for]
[/template]

[template public generateMSSeparateForms(model : Model)] 
[for (packageableElement: PackageableElement | model.packagedElement->select(oclIsTypeOf(Package)and hasStereotype('isa::xsdSchema')))]
[if not (packageableElement.name = 'forms' or packageableElement.name = 'pdc')]
[if getCountriesSeparateXSD('')->includes(packageableElement.name)]
[generateXSDFiles(model, 'path_ms', packageableElement.oclAsType(Package), '-')/][/if][/if]
[/for]
[/template]

[template public generateXSDFile(model: Model, path : String, pack : Package, suffix : String, version: String )]
[file (getFilenameXSD(path, pack.name, suffix, version), false, 'UTF-8')]
[beginSchemaForms('pdc,forms,udt',path,suffix, pack, version, pack.name)/]
	[importXSD('ms_pdc,ms_forms,udt-ms')/]
	[generateContentAggregatedComponents(pack)/]
	[endSchema(pack, version)/]
[/file]
[/template]

[template public generateXSDFiles(model: Model, path : String, pack : Package, suffix : String )]
[for (form: String | getForms(pack))]
[file (getMSFilenameXSD(path, pack.name, form, suffix, getVersion('xsd_'+pack.name+'_'+form)), false, 'UTF-8')]
[beginSchemaForms('pdc,forms,udt,ext',path,suffix, pack, getVersion('xsd_'+pack.name+'_'+form), pack.name)/]
	[importXSD('ms_pdc1,ms_forms1,udt-ms1,ext')/]
[if not (form.startsWith('commonPart'))]
	[includeXSD(pack.name.concat('_commonPart'))/][/if]
[generateFormContentAggregatedComponents(pack,form)/]
[endSchema(pack, getVersion('xsd_'+pack.name+'_'+form))/]
[/file]
[/for]
[/template]

[template public generateContentAggregatedComponents(pack : Package) post(trim())]
[let pElements : Sequence(Class) = pack.ownedType->asSequence()]
[for (packageableElement: PackageableElement | pElements->sortedBy(name))]
[generatePackageableElement(packageableElement)/]
[/for][/let]
[/template]

[template public generateFormContentAggregatedComponents(pack : Package, form: String) post(trim())]
[let pElements : Sequence(Class) = pack.ownedType->asSequence()]
[for (packageableElement: PackageableElement | pElements->select(hasStereotype('isa::'.concat(form))))]
[let elementName : String = packageableElement.name]
[if elementName.startsWith('Frm') and not form.startsWith('commonPart')]
[generateGlobalElement(packageableElement, packageableElement.name.concat('Type'))/]
[/if]
[generatePackageableElement(packageableElement)/]
[/let]
[/for][/let]
[/template]

[template public generatePackageableElement(packageableElement : PackageableElement)]
[if packageableElement.oclIsTypeOf(Class)]
[generateType(packageableElement.oclAsType(Class))/][/if]
[/template]

[template public generateType(class : Class) post (replaceAll('(.^\t*)\n', '').trim()){ 
NDR : String = getNDR('usecorevocstypes');
pack : Package = class.owner.oclAsType(Package);}]
[if not isLocal(class)]
[if(class.general->isEmpty())]
[generateComplextype_ground(class, NDR)/][else]
[generateComplextype_extension_complexcontent(class, NDR)/]	[/if][else]
[if class.isChoice()]
[generateComplextype_ground(class, NDR)/][else]
[if class.ownedAttribute->isEmpty()]
[generateComplextype_ground(class, NDR)/][/if][/if][/if]
[/template]