[comment encoding = UTF-8 /]
[module codelist('http://www.eclipse.org/uml2/5.0.0/UML')]

[import org::eclipse::acceleo::module::publicdocs::common::util/]
[import org::eclipse::acceleo::module::publicdocs::common::schema/]

[template public generateCodeList( model : Model) {
pack:Package = model.packagedElement->select(oclIsTypeOf(Package) and name = 'pdc')->any(true).oclAsType(Package);
version: String = getVersion('xsd');
}]
[generateContentCodeList(pack, version)/]
[/template]

[template public generateContentCodeList(pack : Package, version: String)]
[for (packageableElement: PackageableElement | pack.packagedElement)]
[if packageableElement.oclIsTypeOf(Enumeration)]
[file (getFilenameXSD('path.codelist', pack.name, '-codelist-'.concat(packageableElement.name).concat('-'), version), false, 'UTF-8')]
[beginSchema('cva,cvb,cec,forms,xs,udt', pack, version)/]
[importXSD('cva,cvb,udt')/]
[generateCodelist(packageableElement.name, 'xs:string', packageableElement.oclAsType(Enumeration))/]
[endSchema(pack, version)/]
[/file]
[/if]
[/for]
[/template]

[template public generateCodelist(name: String, base: String, source : Enumeration){
pack                 : Package       = source.owner.oclAsType(Package);
dependencies: Set(Dependency) 		 = pack.getDirectDependencies(source);
supplier             : Class      = dependencies->any(true).supplier->any(true).oclAsType(Class);
supplierQualifiedName: String        = supplier.namespace.name.concat(':').concat(supplier.name)
}]
<xs:complexType name="[name/]CodeListType">
  <xs:simpleContent>
	<xs:restriction base="[if supplier.oclIsUndefined()]udt:CodeType[else][supplierQualifiedName/][/if]">
	[for (enumerationLiteral: EnumerationLiteral | source.ownedLiteral)]
	 	<xs:enumeration value="[enumerationLiteral.name/]"/>
	[/for]
    </xs:restriction>
  </xs:simpleContent>
</xs:complexType>

<xs:complexType name="[name/][getSuffix('complexType')/]">
  <xs:complexContent>
    <xs:restriction base="[name/]CodeListType">
      <xs:attribute name="listVersionID" type="xs:normalizedString" use="required" fixed="[getVersion(name)/]" />
    </xs:restriction>
  </xs:complexContent>
</xs:complexType>
[/template]

[template public generateCodelistForType(class: Class, prop: Property) { 
pack                 : Package       = class.owner.oclAsType(Package);
supplier             : Property      = pack.getDependencies(prop)->any(true).supplier->any(true).oclAsType(Property);
supplierQualifiedName: String        = supplier.namespace.name.concat(supplier.name);
}]

[generateCodelist(class.name.concat(prop.name), 'cvb:'.concat(supplierQualifiedName).concat('Type'), prop.type.oclAsType(Enumeration))/]

[/template]