[comment encoding = UTF-8 /]
[comment Copyright (C) European Union, 2017/]
[comment Licensed under the EUPL/]
[module forms('http://www.eclipse.org/uml2/5.0.0/UML')]

[import org::eclipse::acceleo::module::publicdocs::common::util/]
[import org::eclipse::acceleo::module::publicdocs::common::schema/]
[import org::eclipse::acceleo::module::publicdocs::common::complextype /]
[import org::eclipse::acceleo::module::publicdocs::common::element /]

[template public generateForms(model : Model){
pack:PackageableElement = model.getPackageWithName('forms');
version: String = getVersion('xsd');
}]
[comment [generateXSDFile(model, 'path_core', pack.oclAsType(Package), '-', version)/]
[generateXSDFiles(model, 'path_core', pack.oclAsType(Package), '-')/]
[/template]

[template public generateXSDFile(model: Model, path : String, pack : Package, suffix : String, version: String )]
[file (getFilenameXSD(path, pack.name, suffix, version), false, 'UTF-8')]
[beginSchemaForms('ext,forms,pdc,udt',path,suffix, pack, version, pack.name)/]
	[importXSD('pdc,ext,udt')/]
	[generateContentAggregatedComponents(model, pack)/]
[endSchema(pack, version)/]
[/file]
[/template]

[template public generateXSDFiles(model: Model, path : String, pack : Package, suffix : String )]
[for (form: String | getForms(pack))]
[file (getMSFilenameXSD(path, pack.name, form, suffix, getVersion('xsd_'+pack.name+'_'+form)), false, 'UTF-8')]
[if not (form.startsWith('commonPart'))]
[beginSchemaForms('pdc,forms,udt,forms_commonPart',path,suffix, pack, getVersion('xsd_'+pack.name+'_'+form), pack.name+'_'+form)/]
	[importXSD('pdc1,udt1,forms_commonPart')/]
[else]
[beginSchemaForms('pdc,forms,udt',path,suffix, pack, getVersion('xsd_'+pack.name+'_'+form), pack.name+'_'+form)/]
	[importXSD('pdc1,udt1')/]
[/if]
[generateFormContentAggregatedComponents(model, pack,form)/]
[endSchema(pack, getVersion('xsd_'+pack.name+'_'+form))/]
[/file]
[/for]
[/template]

[template public generateContentAggregatedComponents(model: Model, pack : Package)]
[let pElements : Sequence(Class) = pack.ownedType->asSequence()]
[for (packageableElement: PackageableElement | pElements->sortedBy(name))]
[generatePackageableElement(model, packageableElement)/][/for][/let]
[/template]

[template public generateFormContentAggregatedComponents(model: Model, pack : Package, form: String) post(trim())]
[let pElements : Sequence(Class) = pack.ownedType->asSequence()]
[for (packageableElement: PackageableElement | pElements->select(hasStereotype('isa::'.concat(form))))]
[let elementName : String = packageableElement.name]
[generatePackageableElement(model, packageableElement)/]
[/let]
[/for][/let]
[/template]

[template public generatePackageableElement(model: Model, packageableElement : PackageableElement)]
[if packageableElement.oclIsTypeOf(Class)]
[generateType(model, packageableElement.oclAsType(Class))/][/if]
[/template]

[comment NDR Values: commentsOnly, useCoreVocsTypes, useCoreVocsElements, restrictCoreVocsTypes /]
[template public generateType(model: Model, class : Class) { 
NDR : String = getNDR('usecorevocstypes');
}]
[if isGlobalElement(class)]
[generateElement(class.name, getSuffix('elementType'))/][/if]
[if not isLocal(class)]
[if(class.general->isEmpty())]
[generateComplextype_ground(class, NDR)/]	[else]
[generateComplextype_extension_complexcontent(class, NDR)/][/if][else]
[if isChoice(class)]
[generateComplextype_ground(class, NDR)/][else]
[if class.ownedAttribute->isEmpty()]
[generateComplextype_ground(class, NDR)/][else]
[generateEmptyTypeWithDependency(model, class)/][/if][/if][/if]
[/template]

[template public generateElement(name : String, type: String)]
<[getNS('xs')/]:element name="[name/]" type="[name/][type/]"/>

[/template]

[template public generateEmptyTypeWithDependency(model: Model, aClass: Class) {
pack : Package = aClass.owner.oclAsType(Package);}]
[for (a: Generalization | model.getDerivationsOf(aClass))]
[generateComplextype(aClass)/]
[/for]
[/template]

