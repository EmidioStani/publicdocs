[comment encoding = UTF-8 /]
[comment Copyright (C) European Union, 2017/]
[comment Licensed under the EUPL/]
[module stringLengthComponents('http://www.eclipse.org/uml2/5.0.0/UML')]

[import org::eclipse::acceleo::module::publicdocs::common::util/]
[import org::eclipse::acceleo::module::publicdocs::common::schema/]
[import org::eclipse::acceleo::module::publicdocs::common::annotation/]
[import org::eclipse::acceleo::module::publicdocs::common::element/]
[import org::eclipse::acceleo::module::publicdocs::main::codelist /]

[template public generateStringLengthComponents(model : Model){
pack:Package = getPackageWithName(model, 'qdt');
packCVB: Package = getPackageWithName(model, 'cvb');
version: String = getVersion('xsd');
}]
[comment version: String = pack.getValue(pack.getAppliedStereotype('isa::xsdSchema'), 'version').oclAsType(String); /] 
[file (getFilenameXSD('path_core', pack.name, '-LengthComponents-', version), false, 'UTF-8')]
[beginSchema('cvb,udt', pack, version, pack.name)/]
	[importXSD('cvb,udt')/]
	[generateContentLengthComponents(pack)/]
	[comment generateContentLengthComponents(packCVB)/]
[endSchema(pack, version)/]
[/file]
[/template]

[template public generateContentLengthComponents(pack : Package)]
[let pElements : Sequence(PrimitiveType) = pack.ownedType->asSequence()]
[for (packageableElement: PackageableElement | pElements->sortedBy(name))]
[if packageableElement.oclIsTypeOf(PrimitiveType)]
	[let dependencies: Set(Dependency) = pack.getDirectDependencies(packageableElement)] 
	[comment if not dependencies->isEmpty()/]
	[generateAnnotationDependency(packageableElement,  dependencies)/]
	
		[if pack.name = 'qdt']
		[generatePrimitiveForType(packageableElement.oclAsType(PrimitiveType))/]
		[/if]
		
	
	[comment generateBasicComponentsForClass(packageableElement.oclAsType(PrimitiveType))/]
	[comment /if /]
	[/let]
[elseif packageableElement.oclIsTypeOf(Class)]
			[debug('cva_restriction:' + packageableElement.name + ' - name: ' + packageableElement.name )/]
			[generateComplextype_ground(packageableElement.oclAsType(Class))/]
[/if]
[/for]
[/let]
[/template]

[template public generateComplextype_ground(class : Class){ 
pack : Package = class.owner.oclAsType(Package);}]

[if not  class.ownedAttribute->isEmpty()]
[comment][debug('Complex type:' + class.name)/][/comment]
<[getNS('xs')/]:complexType name="[class.name/]Type">
	[generateAnnotation(class)/]
	<[getNS('xs')/]:sequence> 

		[for (property: Property | class.ownedAttribute)]
			[debug('Complex type - property:' + property.type.name)/]

			[generateElement(property, property.type.name.concat('Type'))/]
		[/for]

	</[getNS('xs')/]:sequence>
	[comment generateAttributes(class, NDR)/]
</[getNS('xs')/]:complexType>
[/if]
[/template]

[template public generateBasicComponentsForClass(class: Class){ 
pack : Package = class.owner.oclAsType(Package); }]
[let pProperty : Sequence(Property) = class.ownedAttribute->asSequence()]
[for (property: Property | pProperty->sortedBy(name))]
[generateBasicComponentForProperty(class, property)/][/for]
[/let]
[/template]

[template public generateBasicComponentForProperty(class: Class, prop: Property){
pack                 : Package       = class.owner.oclAsType(Package);
supplier             : Property      = pack.getDependencies(prop)->any(true).supplier->any(true).oclAsType(Property);
supplierType         : Type          = supplier.type;
supplierQualifiedName: String        = supplier.namespace.name.concat(supplier.name);
}]
[comment if not pack.getDependencies(prop)->isEmpty() and (supplierType->isEmpty() or supplierType.oclIsTypeOf(PrimitiveType))/]
[generateClassForType(class, prop)/][comment /if /]
[if not pack.getDependencies(prop)->isEmpty() and (prop.type.oclIsTypeOf(Enumeration))]
[comment[generateCodelist(class.name.concat(prop.name), 'cvb:'.concat(supplierQualifiedName).concat('Type'), prop.type.oclAsType(Enumeration))/]
[/if]
[if prop.oclIsTypeOf(PrimitiveType)]
[generatePrimitiveTypeForType(class, prop)/][/if]
[/template]

[template public generateElementWithUnqualifiedDataTypes2(prim: PrimitiveType, suffix : String, maxLength : String, name : String) post(trim())
{deps : Set(Dependency) =  getPrimitiveDependencies(prim, prim.name,'xs');
}]
[if deps->size()>0]
		<[getNS('xs')/]:complexType name="[name/][suffix/]">
			<[getNS('xs')/]:simpleContent>
				[for (sup : NamedElement | deps.supplier->any(true))]
					<[getNS('xs')/]:restriction base="[getFQDN2(sup)/]">
				[/for]
					<[getNS('xs')/]:minLength value="0"  />
					<[getNS('xs')/]:maxLength value="[maxLength/]" />
				</[getNS('xs')/]:restriction>
			</[getNS('xs')/]:simpleContent>
		</[getNS('xs')/]:complexType>
[else] 
<[getNS('xs')/]:simpleType name="[name/][suffix/]">
	[for (base: PrimitiveType | prim.general.oclAsType(PrimitiveType))]
			<[getNS('xs')/]:restriction base="[getFQDN5(prim)/]">
	[/for]
			<[getNS('xs')/]:minLength value="0"  />
			<[getNS('xs')/]:maxLength value="[maxLength/]" />
		</[getNS('xs')/]:restriction>
</[getNS('xs')/]:simpleType>
	
[/if]
[/template]

[template public generateElementWithUnqualifiedDataTypes3(prim: PrimitiveType, suffix : String, name : String, maxLength : String) post(trim())
{deps : Set(Dependency) =  getPrimitiveDependencies(prim, prim.name,'cvb');
}]
[debug('maxlength: ' + maxLength)/]
<[getNS('xs')/]:complexType name="[name/][suffix/]">
	<[getNS('xs')/]:simpleContent>
	[for (base: PrimitiveType | prim.oclAsType(PrimitiveType))]
			<[getNS('xs')/]:restriction base="[getFQDN5(prim)/][suffix/]">
	[/for]
			<[getNS('xs')/]:minLength value="0"  />
			<[getNS('xs')/]:maxLength value="[maxLength/]" />
		</[getNS('xs')/]:restriction>
	</[getNS('xs')/]:simpleContent>
</[getNS('xs')/]:complexType>
	
[/template]

[template public generatePrimitiveForType(class: PrimitiveType) { 
pack                 : Package       = class.owner.oclAsType(Package);
maxLength			 : String		= class.name.substring(class.name.index(getRestriction('MaxLength')) + 'MaxLength'.size());
classname			 : String		= class.name.substring(1, class.name.size()-(('MaxLength'.concat(maxLength)).size()));
suffix				 : String 		= getSuffix('complexType');
}]

[if classname = 'String']
	[for (base: PrimitiveType | class.general.oclAsType(PrimitiveType))]
			[debug('arne123 ' + base.name + ' ' + suffix + ' ' + maxLength + ' ' + class.name)/]
			[generateElementWithUnqualifiedDataTypes2(base, suffix, maxLength, class.name)/]
	
	[/for]
[else]
	[for (base: PrimitiveType | class.general.oclAsType(PrimitiveType))]
	
			[generateElementWithUnqualifiedDataTypes3(base, suffix, class.name, maxLength)/]
	
	[/for]
[/if]

[/template]


[template public generateClassForType(class: Class, prop: Property) { 
pack                 : Package       = class.owner.oclAsType(Package);
supplier             : Property      = pack.getDependencies(prop)->any(true).supplier->any(true).oclAsType(Property);
supplierQualifiedName: String        = supplier.namespace.name.concat(supplier.name);
suffix: String = getSuffix('complexType');
}]
[if prop.type.name = 'stringMaxLength50']

<[getNS('xs')/]:complexType name="[class.name/][prop.name/][suffix/]">
	<[getNS('xs')/]:simpleContent>
		<[getNS('xs')/]:restriction base="cvb:[supplierQualifiedName/][suffix/]">
			<[getNS('xs')/]:minLength value="0"  />
			<[getNS('xs')/]:maxLength value="50" />
		</[getNS('xs')/]:restriction>
	</[getNS('xs')/]:simpleContent>
</[getNS('xs')/]:complexType>
[/if]
[if prop.type.name = 'stringMaxLength255']

<[getNS('xs')/]:complexType name="[class.name/][prop.name/][suffix/]">
	<[getNS('xs')/]:simpleContent>
		<[getNS('xs')/]:restriction base="cvb:[supplierQualifiedName/][suffix/]">
			<[getNS('xs')/]:minLength value="0"  />
			<[getNS('xs')/]:maxLength value="255" />
		</[getNS('xs')/]:restriction>
	</[getNS('xs')/]:simpleContent>
</[getNS('xs')/]:complexType>
[/if]

[/template]

[template public generatePrimitiveTypeForType(class: Class, prop: Property) { 
pack                 : Package       = class.owner.oclAsType(Package);
supplier             : Property      = pack.getDependencies(prop)->any(true).supplier->any(true).oclAsType(Property);
supplierType         : Type          = supplier.type;
supplierPackageName  : String        = supplier.type.owner.oclAsType(Package).name.toString();
supplierQualifiedName: String        = supplier.namespace.name.concat(supplier.name);
}]
[/template]