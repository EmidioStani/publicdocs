[comment encoding = UTF-8 /]
[module aggregatingSchema('http://www.eclipse.org/uml2/5.0.0/UML')]

[import org::eclipse::acceleo::module::publicdocs::common::util/]
[import org::eclipse::acceleo::module::publicdocs::common::schema/]
[import org::eclipse::acceleo::module::publicdocs::main::complextype /]

[template public generateAggregatingSchema(model : Model){
version: String = getVersion('xsd');
}]
[comment {version: String = pack.getValue(pack.getAppliedStereotype('isa::xsdSchema'), 'version').oclAsType(String);}/]
[for (pack:PackageableElement | model.packagedElement->select(oclIsTypeOf(Package) and hasStereotypeISA()))]
[if pack.name = 'pdc']
[generateXSDFile(model, 'path.core', pack.oclAsType(Package), '-AggregatedComponents-', version, 'elementsOnly')/]
[else] 
[generateXSDFile(model, 'path.core', pack.oclAsType(Package), '-', version, 'elementsOnly')/]
[/if]
[/for]
[/template]

[template public generateXSDFile(model: Model, path : String, pack : Package, suffix : String, version: String, contentCondition : String )]
[file (getFilenameXSD(path, pack.name, suffix, version), false, 'UTF-8')]
[if pack.name = 'pdc']
[beginSchema('cec,cva,cvb,pdc,udt,xs', pack, version)/]
	[importXSD('cva,cvb,udt')/]
[else]
[beginSchema('cec,forms,pdc,udt,xs', pack, version)/]
	[importXSD('pdc,cec,udt')/]
[/if]
	[generateContentAggregatedComponents(pack)/]
[endSchema(pack, version)/]
[/file]
[/template]

[template public generateContentAggregatedComponents(pack : Package)]
[let pElements : Sequence(Class) = pack.ownedType->asSequence()]
[for (packageableElement: PackageableElement | pElements->sortedBy(name))]
[generatePackageableElement(packageableElement)/]
[/for]
[/let]
[/template]

[template public generatePackageableElement(packageableElement : PackageableElement)]
[if packageableElement.oclIsTypeOf(Class)]
[generateClass(packageableElement.oclAsType(Class))/]
[/if]

[if packageableElement.oclIsTypeOf(PrimitiveType)]
[generatePrimitiveType(packageableElement.oclAsType(PrimitiveType))/]
[/if]
[/template]

[template public generateClass(class : Class) { pack : Package = class.owner.oclAsType(Package);}]
[if pack.name = 'cva']
[generateAllElements(class)/][/if]
[generateType(class)/]
[/template]

[template public generateElement(name : String, type: String)]
<xs:element name="[name/]" type="[name/][type/]"/>
[/template]

[template public generateAllElements(class : Class) { 
pack : Package = class.owner.oclAsType(Package);}]
[for (property: Property | class.ownedAttribute)]
[generateElement(property.name, getSuffix('elementType'))/]
[/for]
[/template]

[comment NDR Values: commentsOnly, useCoreVocsTypes, useCoreVocsElements, restrictCoreVocsTypes /]
[template public generateType(class : Class) { 
NDR : String = getNDR('usecorevocstypes');
pack : Package = class.owner.oclAsType(Package);}]
[if isGlobalElement(class)]
[generateElement(class.name, getSuffix('elementType'))/]	
[/if]
[if not isLocal(class)]
[if(class.general->isEmpty())]
[generateComplextype_ground(class, NDR)/][else]
[generateComplextype_restriction_complexcontent(class, NDR)/][/if]
[generatePropertyTypes(class)/][/if]
[/template]


[template public generatePropertyTypes(class : Class){ 
pack : Package = class.owner.oclAsType(Package); }]
[for (property: Property | class.ownedAttribute)]
[if property.type.oclIsUndefined() and pack.getDependencies(property)->isEmpty()]
[generateSimpleTypeForProperty(property.name)/]
[/if][/for]
[/template]

[template public generateSimpleTypeForProperty(name: String)]
<!-- ===GENERATED PROPERTY TYPE============================= -->
<xs:simpleType name="[name/]Type">
    <xs:restriction base="xs:string"/>
</xs:simpleType>
<!-- ======================================================= -->
[/template]

[template public generatePrimitiveType(primitiveType : PrimitiveType)]
<!-- PrimitiveType [primitiveType.name/]-->
[/template]
