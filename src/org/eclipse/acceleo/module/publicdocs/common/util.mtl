[comment encoding = UTF-8 /]
[comment Copyright (C) European Union, 2017/]
[comment Licensed under the EUPL/]
[module util('http://www.eclipse.org/uml2/5.0.0/UML')]

[import org::eclipse::acceleo::module::publicdocs::common::date::givedate /]
[import org::eclipse::acceleo::module::publicdocs::common::configuration::giveconfiguration /]

[query public getMSFilenameXSD (path : String, country : String, name: String, suffix : String, version : String ) : String
= getMSFullFilename(path, country, name, suffix, version, '.xsd')/]

[query public getMSFullFilename (path : String, country : String,  name: String, suffix : String, version : String, extension : String ) : String
= getConf(path).concat(country).concat('/').concat(getFilename(name, suffix, version, extension))/]

[query public getForms (string: String) : Sequence(String)
= Sequence{'absenceOfCriminalRecordForm','birthForm','capacityToEnterRegisteredPartnershipForm','capacityToMarryForm','commonPart','deathForm','domicileAndOrResidenceForm','lifeForm','maritalStatusForm','marriageForm','registeredPartnershipForm','registeredPartnershipStatusForm'}/]

[query public getCountriesSeparateXSD (string: String) : Sequence(String)
= Sequence{'formAustria','formCyprus','formCzechRepublic','formFinland','formLatvia', 'formLithuania', 'formNetherlands', 'formPoland','formRomania','formSpain','formSlovakia','formFrance','formBelgium','formCroatia','formIreland','formDenmark','formMalta','formSweden','formSlovenia','formLuxembourg'}/]

[query public getForms(pack:Package) : Sequence(String)
= getForms('abc')->select(form|((pack.oclAsType(Package).ownedType->asSequence())->select(hasStereotype('isa::'.concat(form))))->notEmpty())/]

[query public getForms2(pack:Package) : Sequence(String)
= getForms('abc')->select(form|((pack.oclAsType(Package).ownedType->asOrderedSet())->asOrderedSet()->select(hasStereotype('isa::'.concat(form))))->notEmpty())->asOrderedSet()/]


[query public getDependencies (pack : Package, prop: Property) : Set(Dependency) 
= pack.packagedElement->select(oclIsTypeOf(Dependency) and  
  (oclAsType(Dependency).client->any(true) = prop or not prop.owner.oclAsType(Class).general->isEmpty() and oclAsType(Dependency).client->any(true) = prop.getParentProperty()))/]

[query public getGeneralization (prim: PrimitiveType) : Bag(PrimitiveType) 
= prim.generalization.oclAsType(PrimitiveType)/]

[query public getPropertyDependencies (prop: Property, type : String) : Set(Dependency) 
= prop.getModel().getPackageWithName(getNS('xs')).packagedElement->select(oclIsTypeOf(Dependency) and ((oclAsType(Dependency).client->any(true).name) = type))/]

[query public getClassAssociations (pack: String, class: Class, type : String) : Set(Association) 
= class.getModel().getPackageWithName(pack).packagedElement->select(oclIsTypeOf(Association) and ((oclAsType(Association).memberEnd->any(true).name) = class.name))/]

[query public getPrimitiveDependencies (prim: PrimitiveType, type : String, packageName : String) : Set(Dependency) 
= prim.getModel().getPackageWithName(getNS(packageName)).packagedElement->select(oclIsTypeOf(Dependency) and ((oclAsType(Dependency).client->any(true).name) = type))/]


[query public getDerivationsOf (model: Model, elt: Element) : Set(Generalization) 
= model.allOwnedElements()->select(oclIsTypeOf(Generalization) and oclAsType(Generalization).target->any(true) = elt)/]

[query public getDirectDependencies (pack : Package, elt: Element) : Set(Dependency) 
= pack.packagedElement->select(oclIsTypeOf(Dependency) and oclAsType(Dependency).client->any(true) = elt)/]

[query public getPackageWithName (model: Model, namePackage : String) : Package 
= model.packagedElement->select(oclIsTypeOf(Package) and name = namePackage)->any(true).oclAsType(Package) /]

[query public getParentProperty (prop: Property) : Property 
= prop.owner.oclAsType(Class).general->any(true).oclAsType(Class).ownedAttribute->select(name = prop.name)->any(true).oclAsType(Property) /]

[query public belongSamePackage (class1: Class, class2: Class) : Boolean
= class1.namespace.name = class2.namespace.name/]

[query public hasDerivations (model: Model, elt: Element) : Boolean 
= getDerivationsOf(model, elt)->size() > 0/]

[query public hasStereotype (packageableElement : PackageableElement, name: String) : Boolean 
= packageableElement.getAppliedStereotype(name)->notEmpty()/]

[query public getStereotypes (packageableElement : PackageableElement) : Bag(String)  
= packageableElement.getApplicableStereotypes().name/]

[query public hasStereotypesArneTest (pack : Package, form: String) : Set(Stereotype) 
= pack.packagedElement->select(hasStereotype('isa::'.concat(form))).oclAsType(Class).ownedAttribute.type.getAppliedStereotypes()->asSet()->select(oclIsTypeOf(Stereotype) and name <> 'xsdChoice' and name <> form)/]

[query public hasStereotypesArneTest3 (pack : Package, form: String) : Set(Type) 
= pack.packagedElement->select(hasStereotype('isa::'.concat(form))).oclAsType(Class).ownedAttribute.type->select(_package.name = 'forms' )/]

[query public hasCLS (pack : Package, form: String) : Set(Type) 
= pack.packagedElement->select(hasStereotype('isa::'.concat(form))).oclAsType(Class).ownedAttribute.type->select(_package.name = 'cls' )/]

[query public hasStereotypesArneTest4 (pack : Package, form: String) : Set(Stereotype) 
= hasStereotypesArneTest3(pack, form).getAppliedStereotypes()->asSet()->select(oclIsTypeOf(Stereotype) and name <> 'xsdChoice' )/]


[query public hasStereotypesArneTest2 (pack : Package, form: String) : Sequence(String) 
= (((hasStereotypesArneTest4(pack, form).name)->sep(',ms2forms_')).toString())/]

[template public hasFormsDependencies (pack : Package, form: String) post(trim())]
[if hasStereotypesArneTest2(pack, form)->size() > 0]
	['ms2forms_'+(hasStereotypesArneTest2(pack, form))/]
[/if]
[/template]

[template public hasFormsExtensions (pack : Package, form: String) post(trim())]
[if hasStereotypesArneTest5(pack, form)->size() > 0]
	['ms2forms_'+(hasStereotypesArneTest5(pack, form))/]
[/if]
[/template]

[template public hasCLSDependencies (pack : Package, form: String) post(trim())]
[if hasCLS(pack, form)->size() > 0]
	['ms2forms_cls'/]
[/if]
[/template]

[query public hasStereotypesArneTest5 (pack : Package, form: String) : Sequence(String) 
= (((hasStereotypesArneTest6(pack, form).name)->sep(',ms2forms_')).toString())/]

[query public hasStereotypesArneTest6 (pack : Package, form: String) : Set(Stereotype) 
= hasStereotypesArneTest7(pack, form).getAppliedStereotypes()->asSet()->select(oclIsTypeOf(Stereotype) and name <> 'xsdChoice' )/]

[query public hasStereotypesArneTest7 (pack : Package, form: String) : Set(Class) 
= pack.packagedElement->select(hasStereotype('isa::'.concat(form))).oclAsType(Class).general.oclAsType(Class)->select(_package.name = 'forms' )/]

[query public hasStereotypeISA (packageableElement : PackageableElement) : Boolean 
= hasStereotype(packageableElement, 'isa::xsdSchema')/]

[query public hasStereotype (property : Property, name: String) : Boolean 
= property.getAppliedStereotype(name)->notEmpty()/]

[query public isAttribute (property : Property) : Boolean 
= property.name.startsWith('_')/]

[query public isChoice (class : Class) : Boolean 
= class.getAppliedStereotype('isa::xsdChoice')->notEmpty()/]

[query public isGlobalElement (class : Class) : Boolean 
= class.getAppliedStereotype('isa::xsdGlobalElement')->notEmpty()/]

[query public isLocal (type : PackageableElement): Boolean 
= type.oclIsTypeOf(Class) and (type.oclAsType(Class).isChoice() or type.oclAsType(Class).ownedAttribute->isEmpty())/]


[query public getFilename (name: String, suffix : String, version : String, extension : String ) : String
= name.concat(suffix).concat(version).concat(extension)/]

[query public getFullFilename (path : String, name: String, suffix : String, version : String, extension : String ) : String
= getConf(path).concat(getFilename(name, suffix, version, extension))/]

[query public getFilename2 (path : String, name: String, extension : String ) : String
= getConf(path).concat(name).concat('.htm')/]

[query public getFilename2 (path : String, name: String, pack: String, extension : String ) : String
= getConf(path).concat(name).concat('/').concat(pack).concat('.htm')/]

[query public getFilename3 (path : String, name: String, extension : String ) : String
= getConf(path).concat('forms/'+name).concat('.htm')/]

[query public getFilenameTTL (path : String, name: String ) : String
= getConf(path).concat(name).concat('.ttl')/]

[query public getFilenameXSD (path : String, name: String, suffix : String, version : String ) : String
= getFullFilename(path, name, suffix, version, '.xsd')/]

[query public getFQDN (class: Class) : String
= class.namespace.name.concat(':').concat(class.name)/]

[query public getFQDN2 (el: NamedElement) : String
= el.namespace.name.concat(':').concat(el.name)/]

[query public getFQDN3 (prop: Property) : String
= prop.type.owner.oclAsType(Package).name.concat(':').concat(prop.type.name)/]

[query public getFQDN4 (class: Class) : String
= if (class.namespace.name = 'forms') then 'ms2forms_'+class.getAppliedStereotypes().name+':'.concat(class.name) else class.namespace.name.concat(':').concat(class.name) endif/]

[query public getFQDN5 (class: PrimitiveType) : String
= class.namespace.name.concat(':').concat(class.name)/]

[template public getFQDN6 (prop: Property) post(trim())]
[if (prop.type.namespace.name = 'forms')]
	[prop.type.owner.getAppliedStereotypes().name+':'.concat(prop.type.name)/]
[else] 
	[prop.type.namespace.name.concat(':').concat(prop.type.name)/]
[/if]
[/template]

[query public getTodayDate (format: String) : String
= getDate(format)/]

[query public getConf (config: String) : String
= getConfig(config)/]

[query public getURIFromPackName (packname: String) : String
= getConf('url_'.concat(packname))/]

[query public getURIFromFormandPackName (packname: String, form: String) : String
= getConf('url_'.concat(packname).concat('_').concat(form))/]

[query public getPathFromPackName (packname: String) : String
= getConf('path_'.concat(packname))/]

[query public getSuffix (type: String) : String
= getConf('suffix_'.concat(type))/]

[query public getVersion (name: String) : String
= getConf('version_'.concat(name))/]

[query public getRestriction (name: String) : String
= getConf('restriction_'.concat(name))/]

[query public getName (name: String) : String
= getConf('name_'.concat(name))/]

[query public getEmail (name: String) : String
= getConf('email_'.concat(name))/]

[query public getNDR (name: String) : String
= getConf('ndr_'.concat(name))/]

[query public getNS (name: String) : String
= getConf('ns_'.concat(name))/]

[query public getLang (name: String) : String
= getConf('language_'.concat(name))/]

[query public getSHACLStereotype (name: String) : String
= getConf('shacl_stereotype_'.concat(name))/]

[query public getSHACLDefault (name: String) : String
= getConf('shacl_default_'.concat(name))/]

[template public hasDefaultValue (property : Property) post(trim())]
[if property.default.oclIsUndefined()]
[else]
	['default ="'+property.default+'"'/]
[/if]
[/template]

[template public debug(text : String)]
[file ('stdout', false)]DEBUG:[text/]
[/file]
[/template]
